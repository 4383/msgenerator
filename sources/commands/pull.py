import argparse
import json
import sys
import requests
#from core.repository import Repo
from sources.commands.search import search
from sources.commands.search import get
from sources.commands.search import Research
from sources.core import profil
from sources.core.ui import fail


class Project():
    def __init__(self, name, repo):
        self.name


def post(url, data, headers):
    print('creating a new project remote repository')
    print(url)
    identified_headers = {}
    headers = headers.split(',')
    for el in headers:
        key, value = el.split(':')
        identified_headers.update({key: value})
    r = requests.post(url, data=json.dumps(data), headers=identified_headers)
    if r.status_code >= 300:
        fail("your repository say : {0} {1}".format(r.status_code, r.json()['message']))
    return r.status_code, r


def create(args, remote):
    #repo = Repo(
    #        verbose=args.verbose,
    #        projectfile=args.config
    #)
    symbols = Research(args.base, args.origin)
    result = get(symbols)
    data = {'name': args.name, 'description': args.desc}
    post(remote['dest'], data, remote['headers'])
    #status, result = post(repo)
    #result = result.json()
    #if status != 201:
    #    print('Failed ({0}) to create a new remote repository !'.format(status))
    #    print(result['message'])
    #    return
    #initialize(repo)


def run():
    parser = argparse.ArgumentParser(
    description='Generate a new virgin project from remote repository skeleton')
    parser.add_argument('base', help='Skeleton name') 
    parser.add_argument('name', help='New project name')
    if profil.exist():
        user_profil = profil.load()
    else:
        parser.add_argument('dest', help='New project remote repository to use')
        parser.add_argument('--headers', 
                help='Your remote repository auth headers')
    parser.add_argument('--origin', 
                        help='Remote repository skeleton url to use', 
                        default='https://api.github.com/users/microservice/repos')
    parser.add_argument('--desc', help='New project description', 
                        default='Microservice autogenerated project')
    parser.add_argument('--verbose', 
                        help="Activate verbose mode",
                        choices=('on', 'off'),
                        default='off')
    args = parser.parse_args(sys.argv[2:])
    remote = {}

    if user_profil:
        remote.update({'dest': user_profil['remote']['url']})
        remote.update({'headers': user_profil['remote']['headers']}) 
    else:
        remote.update({'dest': args.dest})
        remote.update({'headers': args.headers}) 
        

    if args.verbose == 'on':
        args.verbose = True
    else:
        args.verbose = False
    create(args, remote)
